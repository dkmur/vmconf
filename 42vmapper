#!/system/bin/sh
# version 1.5.3

logfile="/sdcard/vm.log"
url_magisk="https://github.com/Map-A-Droid/MAD-ATV/raw/master/Magisk-v20.3.zip"
url_gapps="https://madatv.b-cdn.net/open_gapps-arm64-7.1-pico-20200715.zip"
vmconf="/data/data/de.vahrmap.vmapper/shared_prefs/config.xml"
pdconf="/data/data/com.mad.pogodroid/shared_prefs/com.mad.pogodroid_preferences.xml"
lastResort="/data/local/vm_last_resort"
customConfig="/data/local/vm_custom_config"

cachereboot=0

#Create logfile
if [ ! -e /sdcard/vm.log ] ;then
  touch /sdcard/vm.log
fi
echo "" >> /sdcard/vm.log
echo "`date +%Y-%m-%d_%T` Device rebooted" >> /sdcard/vm.log

# stderr to logfile
exec 2>> $logfile


########## Functions

log_msg() {
# $1 = severity
# $2 = msg
if [[ "$session_id" ]] ;then
  echo "$msg"
  /system/bin/curl -s -k -L -d "$1,$2" --user "$auth" -H 'Content-Type: text/html' "${server}/autoconfig/${session_id}/log"
fi
}

wait_for_network() {
until ping -c1 8.8.8.8 >/dev/null 2>/dev/null || ping -c1 1.1.1.1 >/dev/null 2>/dev/null; do
    sleep 10
done
ip="$(ifconfig 'eth0'|awk '/inet addr/{print $2}'|cut -d ':' -f 2)"
}

case "$(uname -m)" in
 aarch64) arch="arm64-v8a";;
 armv8l)  arch="armeabi-v7a";;
esac

set_mac(){
echo 1 > /sys/class/unifykeys/lock
echo mac > /sys/class/unifykeys/name
echo "$1" >/sys/class/unifykeys/write
cat /sys/class/unifykeys/read
echo 0 > /sys/class/unifykeys/lock
}

getmadminmac(){
all_macs="$(/system/bin/curl -s -k -L --user "$auth" -H "origin: $origin" "${server}/autoconfig/mymac")"
interface="$(sed -n 1p <<< "$all_macs")"
mac="$(sed -n 2p <<< "$all_macs")"
}

setmadminmac(){
if [[ "$current_mac" == "00:15:18:01:81:31" ]] ;then
  current_mac=$(xxd -l 6 -p /dev/urandom |sed 's/../&:/g;s/:$//')
  ifconfig eth0 down
  until ifconfig eth0 hw ether "$current_mac" 2>/dev/null; do
    current_mac=$(xxd -l 6 -p /dev/urandom |sed 's/../&:/g;s/:$//')
  done
  ifconfig eth0 up
  sleep 3
fi
/system/bin/curl -s -k -L --user "$auth" -H 'Content-Type: text/html' -H "origin: $origin" "${server}/autoconfig/mymac" -d "$current_mac"
getmadminmac
while [[ "$mac" == "" ]] ;do
  # if that mac was not accepted
  current_mac=$(xxd -l 6 -p /dev/urandom |sed 's/../&:/g;s/:$//')
  ifconfig eth0 down
  until ifconfig eth0 hw ether "$current_mac" 2>/dev/null; do
    current_mac=$(xxd -l 6 -p /dev/urandom |sed 's/../&:/g;s/:$//')
  done
  ifconfig eth0 up
  sleep 3
  # set a new one
  /system/bin/curl -s -k -L --user "$auth" -H 'Content-Type: text/html' -H "origin: $origin" "${server}/autoconfig/mymac" -d "$current_mac"
  # check again
  getmadminmac
done
}

checkmac(){
if [[ "$(/system/bin/curl -s -k -L -o /dev/null -w "%{http_code}" --user "$auth" -H "origin: $origin" "${server}/autoconfig/mymac")" == "200" ]] ;then
  if ifconfig|grep -A5 wlan0|grep -q inet ;then
    current_mac=$(ifconfig wlan0|awk '/HWaddr/{print $5}')
  elif ifconfig|grep -A5 eth0|grep -q inet ;then
    current_mac=$(ifconfig eth0|awk '/HWaddr/{print $5}')
    getmadminmac
    echo "MAD-assigned MAC: \"$mac\""
    echo "Current MAC: \"$current_mac\""
    if [[ "$mac" == "" ]] ;then
      # use our current mac for now on
      setmadminmac
      set_mac "$current_mac"
    elif [[ "$mac" != "$current_mac" ]] ;then
      #use the mac suppplied from madmin
      set_mac "$mac"
    fi
  fi
else
  echo "`date +%Y-%m-%d_%T` 42vmapper: could not find $origin in madmin, this should not happen" >> /sdcard/vm.log
fi
}

repack_magisk(){
log_msg 2 "Starting Magisk repackaging"
echo "`date +%Y-%m-%d_%T` 42vmapper: Starting Magisk repackaging" >> /sdcard/vm.log
monkey -p com.topjohnwu.magisk 1
sleep 30
input tap 39 42
sleep 5
input tap 150 537
sleep 5
input tap 315 552
sleep 5
input keyevent 61
sleep 2
input keyevent 61
sleep 2
input keyevent 66
sleep 2
}

install_magisk() {
usbmagisk="$(find /mnt/media_rw/ -iname Magisk-v20.3.zip 2>/dev/null)"
if [ -z $usbmagisk ] ;then
  log_msg 2 "Downloading Magisk"
  echo "`date +%Y-%m-%d_%T` 42vmapper: Downloading Magisk"  >> $logfile
  until /system/bin/curl -k -s -L --fail --show-error -o /sdcard/magisk.zip "$url_magisk" || { echo "`date +%Y-%m-%d_%T` 42vmapper: Download magisk failed, exit script" >> $logfile ; exit 1; } ;do
    sleep 2
  done
else
  log_msg 2 "Copy Magisk from usb"
  echo "`date +%Y-%m-%d_%T` 42vmapper: Copy Magisk from usb"  >> $logfile
  cp $usbmagisk /sdcard/magisk.zip
fi
mkdir -p /cache/recovery
touch /cache/recovery/command
echo '--update_package=/sdcard/magisk.zip' >> /cache/recovery/command
echo "`date +%Y-%m-%d_%T` 42vmapper: Magisk set to be installed" >> /sdcard/vm.log
cachereboot=1
}

check_magisk(){
# We'll attempt to do this a little early since apparently people get impatient
if [[ -f /sbin/magisk ]] ;then
  log_msg 2 "Setting Magisk permissions"
  echo "`date +%Y-%m-%d_%T` 42vmapper: Setting Magisk permissions" >> /sdcard/vm.log
  /sbin/magiskhide --add com.nianticlabs.pokemongo
  [[ -f /sdcard/magisk.zip ]] && rm /sdcard/magisk.zip
  [[ -f /sdcard/smali.zip ]] && rm /sdcard/smali.zip
  #check if shell has su root
  suid="$(id -u shell)"
  pol="$(sqlite3 /data/adb/magisk.db "select policy from policies where package_name='com.android.shell'")"
  if [[ "$suid" ]] && [[ "$pol" != 2 ]] ;then
    magisk --sqlite "DELETE from policies WHERE package_name='com.android.shell'"
    magisk --sqlite "INSERT INTO policies (uid,package_name,policy,until,logging,notification) VALUES($suid,'com.android.shell',2,0,1,1)"
    echo "`date +%Y-%m-%d_%T` 42vmapper: Shell granted su root access" >> /sdcard/vm.log
  fi
fi
# Install magisk.  If it already exists, check for an update
if ! [[ -f /sbin/magisk ]] ;then
  log_msg 2 "Preparing Magisk installation"
  echo "`date +%Y-%m-%d_%T` 42vmapper: Preparing Magisk installation" >> /sdcard/vm.log
  touch /sdcard/magisk_repackage
  install_magisk
elif ! magisk -c|grep -q "$magisk_ver"; then
  log_msg 2 "Updating Magisk"
  echo "`date +%Y-%m-%d_%T` 42vmapper: Magisk update required" >> /sdcard/vm.log
  touch /sdcard/magisk_update
  install_magisk
elif [[ -f /sdcard/magisk_repackage ]] ;then
  log_msg 2 "Magisk repackaging required"
  echo "`date +%Y-%m-%d_%T` 42vmapper: Magisk repackaging required" >> /sdcard/vm.log
  # After installation the manager may not be fully installed.  Wait for it to show then repackage
  until [[ $(pm list packages com.topjohnwu.magisk) ]] ;do
    sleep 10
  done
  r=0
  while [[ $(pm list packages com.topjohnwu.magisk) ]] ;do
    sleep 10
    # if repackaging didnt take place in 200 seconds, try again
    if ! (( $((r%20)) )); then
      log_msg 2 "Attempting to repackage magisk"
      echo "`date +%Y-%m-%d_%T` 42vmapper: Attempting to repackage Magisk" >> /sdcard/vm.log
      repack_magisk
    fi
    r=$((r+1))
  done
  log_msg 2 "Magisk successfully repackaged"
  echo "`date +%Y-%m-%d_%T` 42vmapper: Magisk successfully repackaged" >> /sdcard/vm.log
  rm -f /sdcard/magisk_repackage
  sleep 10
elif [[ -f /sdcard/magisk_update ]] ;then
  while [[ $(pm list packages com.topjohnwu.magisk) ]] ;do
    pm uninstall com.topjohnwu.magisk
    echo "`date +%Y-%m-%d_%T` 42vmapper: Magisk uninstalled" >> /sdcard/vm.log
    sleep 3
  done
  rm -f /sdcard/magisk_update
elif [[ $(pm list packages com.topjohnwu.magisk) ]] ;then
  log_msg 4 "Magisk manager is installed and not repackaged, this should not happen."
  echo "`date +%Y-%m-%d_%T` 42vmapper: Magisk installed and not repackaged, this should not happen" >> /sdcard/vm.log
fi
}

test_session(){
[[ "$session_id" ]] || return 5
case "$(/system/bin/curl -s -k -L -o /dev/null -w "%{http_code}" --user "$auth" "${server}/autoconfig/${session_id}/status")" in
 406) sleep 15 && test_session
   ;;
 40*) return 3
   ;;
 200) return 0
   ;;
  "") return 2
   ;;
   *) echo "unexpected status $(/system/bin/curl -s -k -L -o /dev/null -w "%{http_code}" --user "$auth" "${server}/autoconfig/${session_id}/status") from madmin" && return 4
   ;;
esac
}

make_session(){
until test_session ;do
  echo "`date +%Y-%m-%d_%T` 42vmapper: Trying to register session" >> /sdcard/vm.log
  session_id=$(/system/bin/curl -s -k -L -X POST --user "$auth" "${server}/autoconfig/register")
  sleep 15
done
echo "$session_id" > /sdcard/reg_session
}

check_session(){
if ! [[ -f /sdcard/reg_session ]] ;then
  make_session
else
  session_id="$(cat /sdcard/reg_session)"
  if ! test_session ;then
    rm -f /sdcard/reg_session
    make_session
  fi
fi
}


########## Execution

#wait on internet
wait_for_network
echo "`date +%Y-%m-%d_%T` 42vmapper: Internet connection available" >> $logfile

mount -o remount,rw /system

# remove 55vmapper if exists
[ -f /system/etc/init.d/55vmapper ] && rm -f /system/etc/init.d/55vmapper


if [ -f "$vmconf" ] && [ ! -z $(grep -w 'postdest' $vmconf | sed -e 's/    <string name="postdest">\(.*\)<\/string>/\1/') ] ; then
  server=$(grep -w 'postdest' $vmconf | sed -e 's/    <string name="postdest">\(.*\)<\/string>/\1/')
  authuser=$(grep -w 'authuser' $vmconf | sed -e 's/    <string name="authuser">\(.*\)<\/string>/\1/')
  authpassword=$(grep -w 'authpassword' $vmconf | sed -e 's/    <string name="authpassword">\(.*\)<\/string>/\1/')
  auth="$authuser:$authpassword"
  origin=$(grep -w 'origin' $vmconf | sed -e 's/    <string name="origin">\(.*\)<\/string>/\1/')
  #pm disable-user com.android.vending
  [[ -f /sdcard/reg_session ]] && check_session
  echo "`date +%Y-%m-%d_%T` 42vmapper: Using vahrmap.vmapper settings" >> $logfile
elif [ -f "$lastResort" ]; then
  server=$(awk '{print $1}' "$lastResort")
  authuser=$(awk '{print $2}' "$lastResort")
  authpassword=$(awk '{print $3}' "$lastResort")
  auth="$authuser:$authpassword"
  #pm disable-user com.android.vending
  [[ -f /sdcard/reg_session ]] && check_session
  origin=$(awk '{print $4}' "$lastResort")
  echo "`date +%Y-%m-%d_%T` 42vmapper: Using settings stored in /sdcard/vm_last_resort"  >> $logfile
elif [[ -f /data/local/vmconf ]] ;then
  server=$(grep -w 'postdest' /data/local/vmconf | sed -e 's/    <string name="postdest">\(.*\)<\/string>/\1/')
  authuser=$(grep -w 'authuser' /data/local/vmconf | sed -e 's/    <string name="authuser">\(.*\)<\/string>/\1/')
  authpassword=$(grep -w 'authpassword' /data/local/vmconf | sed -e 's/    <string name="authpassword">\(.*\)<\/string>/\1/')
  auth="$authuser:$authpassword"
  origin=$(grep -w 'origin' /data/local/vmconf | sed -e 's/    <string name="origin">\(.*\)<\/string>/\1/')
  #pm disable-user com.android.vending
  check_session
  echo "`date +%Y-%m-%d_%T` 42vmapper: Using settings stored in /data/local/vmconf"  >> $logfile
else
  usbfile="$(find /mnt/media_rw/ -name mad_autoconf.txt|head -n1)"
  if [[ "$usbfile" ]] || [ -f "$customConfig" ] ;then
    [ ! -z $(find /mnt/media_rw/ -name useVMCdevelop.txt|head -n1) ] && touch /sdcard/useVMCdevelop
    if [[ "$usbfile" ]] ;then
      echo "`date +%Y-%m-%d_%T` 42vmapper: No madmin settings found on device but have usbfile, assuming new install"  >> $logfile
      server="$(awk 'NR==1{print $1}' "$usbfile")"
      auth="$(awk 'NR==2{print $1}' "$usbfile")"
    else
      echo "`date +%Y-%m-%d_%T` 42vmapper: No madmin settings found on device but have vm_custom_config file, assuming new install"  >> $logfile
      server=$(awk '{print $1}' "$customConfig")
      authuser=$(awk '{print $2}' "$customConfig")
      authpassword=$(awk '{print $3}' "$customConfig")
      proxy=$(awk '{print $4}' "$customConfig")
      if [[ "$proxy" ]] ;then
        echo "`date +%Y-%m-%d_%T` 42vmapper: Found custom proxy setting - copying to settings global "  >> $logfile
        settings put global http_proxy "$proxy"
        echo "`date +%Y-%m-%d_%T` 42vmapper: Copied custom proxy setting $proxy"  >> $logfile
      fi
      auth="$authuser:$authpassword"
    fi

    check_session
    origin=$(/system/bin/curl -s -k -L --user "$auth" "${server}/autoconfig/${session_id}/origin")
    log_msg 2 "Starting new install for $origin! IP is $ip"

    until /system/bin/curl -k -s -L --fail --show-error -o /data/local/vmconf -u $auth -H "origin: $origin" "$server/vm_conf" || { echo "`date +%Y-%m-%d_%T` Download config.xml failed for origin=$origin, auth=$auth, server=$server from ip=$ip. Exit script" >> $logfile ; exit 1; } ;do
      sleep 2
    done
    log_msg 2 "VMapper configuration downloaded to /data/local/vmconf"
    echo "`date +%Y-%m-%d_%T` 42vmapper: VMapper configuration downloaded to /data/local/vmconf"  >> $logfile

    checkmac
    wait_for_network
    log_msg 2 "Check MAC adress change completed, IP is $ip"
    echo "`date +%Y-%m-%d_%T` 42vmapper: MAC checked, ip is $ip"  >> $logfile

    log_msg 2 "Starting install of PoGo, vmapper.sh and ATVdetailsSender.sh"
    if [ -f /sdcard/useVMCdevelop ] ;then
      until /system/bin/curl -s -k -L --fail --show-error -o /system/bin/vmapper.sh https://raw.githubusercontent.com/v-mapper/vmconf/develop/vmapper.sh || { echo "`date +%Y-%m-%d_%T` 42vmapper: Download vmapper.sh failed for origin=$origin, auth=$auth, server=$server from ip=$ip. Exit script" >> $logfile ; exit 1; } ;do
        sleep 2
      done
      chmod +x /system/bin/vmapper.sh
      log_msg 2 "vmapper.sh downloaded"
      echo "`date +%Y-%m-%d_%T` 42vmapper: Installed vmapper.sh, from vmconf develop !!"  >> $logfile
    else
      until /system/bin/curl -s -k -L --fail --show-error -o /system/bin/vmapper.sh https://raw.githubusercontent.com/v-mapper/vmconf/main/vmapper.sh || { echo "`date +%Y-%m-%d_%T` 42vmapper: Download vmapper.sh failed for origin=$origin, auth=$auth, server=$server from ip=$ip. Exit script" >> $logfile ; exit 1; } ;do
        sleep 2
      done
      chmod +x /system/bin/vmapper.sh
      log_msg 2 "vmapper.sh downloaded"
      echo "`date +%Y-%m-%d_%T` 42vmapper: Installed vmapper.sh"  >> $logfile
    fi

    pogowizardversion="$(/system/bin/curl -s -k -L -u $auth -H "origin: $origin" "$server/mad_apk/pogo/$arch")"
    usbpogo="$(find /mnt/media_rw/ -iname *pokemongo*$arch*.apk 2>/dev/null)"
    if [ -z $usbpogo ] ;then
      log_msg 2 "Downloading PoGo from wizard"
      echo "`date +%Y-%m-%d_%T` 42vmapper: Downloading PoGo from wizard"  >> $logfile
      until /system/bin/curl -k -s -L --fail --show-error -o /sdcard/Download/pogo.apk -u $auth -H "origin: $origin" "$server/mad_apk/pogo/$arch/download" || { echo "`date +%Y-%m-%d_%T` 42vmapper: Download PoGo failed for origin=$origin, auth=$auth, server=$server from ip=$ip. Exit script" >> $logfile ; exit 1; } ;do
        sleep 2
      done
    else
      log_msg 2 "Copy PoGo from usb"
      echo "`date +%Y-%m-%d_%T` 42vmapper: Copy PoGo from usb"  >> $logfile
      cp $usbpogo /sdcard/Download/pogo.apk
    fi
    /system/bin/pm install -r /sdcard/Download/pogo.apk
    /system/bin/rm -f /sdcard/Download/pogo.apk
    echo "`date +%Y-%m-%d_%T` 42vmapper: Installed PoGo"  >> $logfile

    if [ -f /sdcard/useVMCdevelop ] ;then
      until /system/bin/curl -s -k -L --fail --show-error -o /system/bin/ATVdetailsSender.sh https://raw.githubusercontent.com/v-mapper/vmconf/develop/ATVdetailsSender.sh || { echo "`date +%Y-%m-%d_%T` 42vmapper: Download ATVdetailsSender.sh failed for origin=$origin, auth=$auth, server=$server from ip=$ip. Exit script" >> $logfile ; exit 1; } ;do
        sleep 2
      done
      chmod +x /system/bin/ATVdetailsSender.sh
      log_msg 2 "ATVdetailsSender.sh downloaded"
      echo "`date +%Y-%m-%d_%T` 42vmapper: Installed ATVdetailsSender.sh, from vmconf develop !!"  >> $logfile
    else
      until /system/bin/curl -s -k -L --fail --show-error -o /system/bin/ATVdetailsSender.sh https://raw.githubusercontent.com/v-mapper/vmconf/main/ATVdetailsSender.sh || { echo "`date +%Y-%m-%d_%T` 42vmapper: Download ATVdetailsSender.sh failed for origin=$origin, auth=$auth, server=$server from ip=$ip. Exit script" >> $logfile ; exit 1; } ;do
        sleep 2
      done
      chmod +x /system/bin/ATVdetailsSender.sh
      log_msg 2 "ATVdetailsSender.sh downloaded"
      echo "`date +%Y-%m-%d_%T` 42vmapper: Installed ATVdetailsSender.sh"  >> $logfile
    fi
  fi
fi

usbWebhookSender="$(find /mnt/media_rw/ -iname ATVdetailsWebhook.txt 2>/dev/null)"
if [ ! -z $usbWebhookSender ] ;then
  cp $usbWebhookSender /data/local/ATVdetailsWebhook.config
  touch /sdcard/sendwebhook
  log_msg 2 "ATVdetailsSender configuration copied from usb and enabled"
  echo "`date +%Y-%m-%d_%T` 42vmapper: ATVdetailsSender configuration copied from usb and enabled"  >> $logfile
fi

customWebhookSender="/system/etc/ATVdetailsWebhook.*"
if [[ -f "$customWebhookSender" ]] ;then
  cp "$customWebhookSender" "/data/local/ATVdetailsWebhook.config"
  touch /sdcard/sendwebhook
  log_msg 2 "ATVdetailsSender configuration copied from custom rom and enabled"
  echo "`date +%Y-%m-%d_%T` 42vmapper: ATVdetailsSender configuration copied from custom rom and enabled"  >> $logfile
fi

check_magisk

# Install gapps
if [[ ! $(pm list packages android.vending) ]] ;then
  usbgapps="$(find /mnt/media_rw/ -iname open_gapps-arm64-7.1-pico-20200715.zip 2>/dev/null)"
  if [ -z $usbgapps ] ;then
    log_msg 2 "Downloading Gapps"
    echo "`date +%Y-%m-%d_%T` 42vmapper: Downloading Gapps"  >> $logfile
    until /system/bin/curl -k -s -L --fail --show-error -o /sdcard/gapps.zip "$url_gapps" || { echo "`date +%Y-%m-%d_%T` 42vmapper: Download gapps failed, exit script" >> $logfile ; exit 1; } ;do
      sleep 2
    done
  else
    log_msg 2 "Copy Gapps from usb"
    echo "`date +%Y-%m-%d_%T` 42vmapper: copy Gapps from usb"  >> $logfile
    cp $usbgapps /sdcard/gapps.zip
  fi
  mkdir -p /cache/recovery
  touch /cache/recovery/command
  echo '--update_package=/sdcard/gapps.zip' >> /cache/recovery/command
  cachereboot=1
  log_msg 2 "Gapps set to be installed"
  echo "`date +%Y-%m-%d_%T` 42vmapper: Gapps set to be installed" >> /sdcard/vm.log
  log_msg 2 "All files downloaded or copied from usb, it can be extracted"
  echo "`date +%Y-%m-%d_%T` 42vmapper: All files downloaded or copied from usb" >> /sdcard/vm.log
fi

[[ -d /sdcard/TWRP ]] && rm -rf /sdcard/TWRP
[[ $(settings get global hdmi_control_enabled) != "0" ]] && settings put global hdmi_control_enabled 0
[[ $(settings get global stay_on_while_plugged_in) != 3 ]] && settings put global stay_on_while_plugged_in 3
! settings get secure location_providers_allowed|grep -q gps && settings put secure location_providers_allowed +gps

if (( "$cachereboot" )) ;then
  log_msg 2 "Rebooting into recovery mode for required installations"
  echo "`date +%Y-%m-%d_%T` 42vmapper: Rebooting into recovery mode for required installations" >> /sdcard/vm.log
  echo '--wipe_cache' >> /cache/recovery/command
  reboot recovery
fi

# Check pogo settings
log_msg 2 "Checking PoGo settings"
if [[ "$(pm list packages com.nianticlabs.pokemongo)" ]] && ! dumpsys package com.nianticlabs.pokemongo|grep ACCESS_FINE_LOCATION|grep granted|grep -q 'granted=true'; then
  pm grant com.nianticlabs.pokemongo android.permission.ACCESS_FINE_LOCATION
  pm grant com.nianticlabs.pokemongo android.permission.ACCESS_COARSE_LOCATION
  pm grant com.nianticlabs.pokemongo android.permission.CAMERA
  pm grant com.nianticlabs.pokemongo android.permission.GET_ACCOUNTS
  echo "`date +%Y-%m-%d_%T` 42vmapper: PoGo settings adjusted" >> /sdcard/vm.log
fi

# Install VMapper
if ! [[ -f "$vmconf" ]] && [[ "$session_id" ]] ;then
  log_msg 2 "Install and configure vmapper"
  echo "`date +%Y-%m-%d_%T` 42vmapper: Starting install of vmapper" >> /sdcard/vm.log
  /system/bin/vmapper.sh -nrc -ivw
fi

# Close autoconfig session
if [[ -f /sdcard/reg_session ]] && [[ -f "$vmconf" ]] ;then
  /system/bin/curl -s -k -L -X DELETE --user "$auth" "${server}/autoconfig/${session_id}/complete"
  rm -f /sdcard/reg_session
  rm -f /data/local/vmconf
  echo "`date +%Y-%m-%d_%T` 42vmapper: autoconfig session closed" >> /sdcard/vm.log
fi

mount -o remount,ro /system
# check for updates / execute vmapper.sh
/system/bin/vmapper.sh -ua
